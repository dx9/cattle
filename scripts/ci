#!/bin/bash
set -e

cd $(dirname $0)

# An environment is a db and test plan
declare -A ENVIRONMENTS=${ENVIRONMENTS:-( [h2]=lite [mysql]=full [pgsql]=full )}
declare -A RESULTS=( [h2]=0 [mysql]=0 [pgsql]=0 )
export RUNTIME_DIR_CLEAN=true
export CATTLE_LOGBACK_ROOT_LEVEL=error

# Uncomment this if you're impatient
#export CATTLE_IDEMPOTENT_CHECKS=false

echo Launching Docker
if grep -q overlay /proc/filesystems; then
    GRAPH=overlay
else
    GRAPH=aufs
fi
docker daemon -D -s $GRAPH >/tmp/docker.log 2>&1 &
for i in {1..10}; do
    if docker info >/dev/null 2>&1; then
        break
    else
        sleep 1
    fi
done
docker info

echo_dot()
{
    trap "exit 0" TERM
    echo -n " "
    while true; do
        echo -n .
        sleep 1
    done
}

run()
{
    echo -n Running "$@"
    echo_dot 2>/dev/null &
    DOT_PID=$!

    "$@" > /tmp/${1}.log || {
        echo "$@" failed
        cat /tmp/${1}.log
        echo "$@" failed
        exit 1
    }

    kill $DOT_PID
    echo
}

gist ()
{
    local result=0
    printf "\n\e[1;35mRESULTS\e[0m\n"
    printf "\e[1;32m%-10s %-10s Status\e[0m\n" "Database" "Plan"

    for db in "${!ENVIRONMENTS[@]}"
    do
        if [ ${RESULTS[${db}]} -ge 1 ]; then
            printf "%-10s %-10s \e[1;31mFAILED\e[0m\n" $db ${ENVIRONMENTS[$db]}
            result=1
        else
            printf "%-10s %-10s \e[1;32mSUCCESS\e[0m\n" $db ${ENVIRONMENTS[$db]}
        fi
    done

    exit $result
}

tear_down() {
    echo "Shutting down agent..."
    set +e
    docker stop $(docker ps -q) &>> /dev/null
    docker rm -fv $(docker ps -a -q) &>> /dev/null
    set -e

    echo "Shutting down server..."
    pkill java
    case $DB in
        mysql ) service mysql stop ;;
        pgsql ) service postgresql stop ;;
    esac
}

test_failed ()
{
    cat /tmp/run.log
    ((RESULTS[$1]++))
}

# Background to start the Docker pulls
./test-warm >/dev/null &

CI=true MAVEN_ARGS='-B -q' run ./build

for DB in "${!ENVIRONMENTS[@]}"
do

    echo -e "\n\e[1;35mTESTING $DB\e[0m\n"

    export RUNTIME_DIR=$(pwd)/../runtime/ci-$DB/

    # Bootstrap Database
    case $DB in

        h2 )
            ;;

        mysql )

            export CATTLE_DB_CATTLE_DATABASE=mysql
            : ${CATTLE_DB_CATTLE_MYSQL_PORT:=13306}
            export CATTLE_DB_CATTLE_MYSQL_PORT
            run ./mysql --clean
            ;;

        pgsql )

            export CATTLE_DB_CATTLE_DATABASE=postgres
            run ./pgsql --clean
            ;;

        * )

            echo "Unknown database specified."
            exit 1

    esac

    run ./run --background

    # Test Environment
    case ${ENVIRONMENTS[$DB]} in

        full )

            threads=$(($(nproc) + 1))
            if [ $threads -gt 8 ]; then
                threads=8
            fi

            # Wait for completion now to ensure that images are pulled
            ./test-warm

            AGENT_IMAGE=$(grep bootstrap.required.image ../resources/content/cattle-global.properties | cut -f2 -d=)
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ${AGENT_IMAGE} http://localhost:8081 >/tmp/register.log &

            ./wait-for-hosts

            set +e
            ./test -e py27 -- -m nonparallel && ./test -- -m "'not nonparallel'" -n $threads -v || test_failed $DB
            set -e

            ;;

        lite )

            set +e
            ./test -e py27 -- core/test_virtual_machine.py core/test_container.py || test_failed $DB
            set -e
            ;;

        * )

            echo "Unknown test plan specified."
            exit 1

    esac

    tear_down

done

gist
