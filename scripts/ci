#!/bin/bash
set -e

cd $(dirname $0)

declare -A ENVIRONMENTS=${ENVIRONMENTS:-( [h2]=lite [mysql]=full [pgsql]=full )}
export RUNTIME_DIR_CLEAN=true
export CATTLE_LOGBACK_ROOT_LEVEL=error

# Uncomment this if you're impatient
#export CATTLE_IDEMPOTENT_CHECKS=false

echo_dot()
{
    trap "exit 0" TERM
    echo -n " "
    while true; do
        echo -n .
        sleep 1
    done
}

run()
{
    echo -n Running "$@"
    echo_dot 2>/dev/null &
    DOT_PID=$!

    "$@" > /tmp/${1}.log || {
        echo "$@" failed
        cat /tmp/${1}.log
        echo "$@" failed
        exit 1
    }

    kill $DOT_PID
    echo
}

test_failed ()
{
    echo Test failed
    echo '***** RUN LOG *****'
    cat /tmp/run.log
    echo Test failed
    exit 1
}

tear_down() {
    echo "Shutting down agent..."
    set +e
    docker stop $(docker ps -q) &>> /dev/null
    docker rm -fv $(docker ps -a -q) &>> /dev/null
    set -e

    echo "Shutting down server..."
    pkill java
    case ${db} in
        mysql ) service mysql stop ;;
        pgsql ) service postgresql stop ;;
    esac
}

echo $(hostname)

if [ -x "$(which wrapdocker)" ]; then
    echo Launching Docker
    wrapdocker >/tmp/docker.log 2>&1
    docker info
fi

# Background to start the Docker pulls
./test-warm >/dev/null &

run ./bootstrap
run ./clean

CI=true MAVEN_ARGS='-B -q' run ./build

for db in "${!ENVIRONMENTS[@]}"
do

    echo "TESTING ${db}"

    # Bootstrap Environment
    case ${db} in

        h2 )

           export RUNTIME_DIR=$(pwd)/../runtime/ci-h2/
           ;;

        mysql )

            export RUNTIME_DIR=$(pwd)/../runtime/ci-mysql/
            export CATTLE_DB_CATTLE_DATABASE=mysql
            : ${CATTLE_DB_CATTLE_MYSQL_PORT:=13306}
            export CATTLE_DB_CATTLE_MYSQL_PORT
            ./bootstrap-mysql --clean
            ;;

        pgsql )

            export RUNTIME_DIR=$(pwd)/../runtime/ci-postgres/
            export CATTLE_DB_CATTLE_DATABASE=postgres
            export DB_LOG_FILE=/var/log/postgresql/postgresql-9.4-main.log
            ./bootstrap-pgsql --clean
            ;;

        * )

            echo "Unknown database specified."
            exit 1

    esac

    trap tear_down EXIT SIGTERM
    run ./run --background

    # Test Environment
    case ${ENVIRONMENTS[${db}]} in

        full )

            # Wait for completion now to ensure that images are pulled
            ./test-warm

            AGENT_IMAGE=$(grep bootstrap.required.image ../resources/content/cattle-global.properties | cut -f2 -d=)
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ${AGENT_IMAGE} http://localhost:8081 >/tmp/register.log &

            ./wait-for-hosts

            ./test -- -n 2 -v || test_failed
            ;;

        lite )

            ./test -e py27 -- core/test_virtual_machine.py core/test_container.py || test_failed
            ;;

        * )

            echo "Unknown test plan specified."
            exit 1

    esac

    tear_down
    trap - EXIT SIGTERM

done
